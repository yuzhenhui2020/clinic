<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaoniucr.mapper.DoctorMapper">
    <resultMap id="BaseResultMap" type="com.xiaoniucr.entity.Doctor">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
        <result column="telephone" jdbcType="VARCHAR" property="telephone"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="sex" jdbcType="INTEGER" property="sex"/>
        <result column="birthday" jdbcType="DATE" property="birthday"/>
        <result column="education" jdbcType="INTEGER" property="education"/>
        <result column="entry_time" jdbcType="DATE" property="entryTime"/>
        <result column="dept_id" jdbcType="INTEGER" property="deptId"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id
        , username, password, nickname, telephone, email, sex, birthday, education, entry_time, dept_id,
    address, status, create_time, update_time
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_doctor
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from t_doctor
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.xiaoniucr.entity.Doctor">
        insert into t_doctor (id, username, password,
                              nickname, telephone, email,
                              sex, birthday, education,
                              entry_time, dept_id, address, status,
                              create_time, update_time)
        values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
                #{nickname,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
                #{sex,jdbcType=INTEGER}, #{birthday,jdbcType=DATE}, #{education,jdbcType=INTEGER},
                #{entryTime,jdbcType=DATE}, #{deptId,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER},
                #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
    </insert>

    <insert id="insertSelective" parameterType="com.xiaoniucr.entity.Doctor">
        insert into t_doctor
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="nickname != null">
                nickname,
            </if>
            <if test="telephone != null">
                telephone,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="birthday != null">
                birthday,
            </if>
            <if test="education != null">
                education,
            </if>
            <if test="entryTime != null">
                entry_time,
            </if>
            <if test="deptId != null">
                dept_id,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="telephone != null">
                #{telephone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=INTEGER},
            </if>
            <if test="birthday != null">
                #{birthday,jdbcType=DATE},
            </if>
            <if test="education != null">
                #{education,jdbcType=INTEGER},
            </if>
            <if test="entryTime != null">
                #{entryTime,jdbcType=DATE},
            </if>
            <if test="deptId != null">
                #{deptId,jdbcType=INTEGER},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.xiaoniucr.entity.Doctor">
        update t_doctor
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                nickname = #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="telephone != null">
                telephone = #{telephone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=INTEGER},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=DATE},
            </if>
            <if test="education != null">
                education = #{education,jdbcType=INTEGER},
            </if>
            <if test="entryTime != null">
                entry_time = #{entryTime,jdbcType=DATE},
            </if>
            <if test="deptId != null">
                dept_id = #{deptId,jdbcType=INTEGER},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.xiaoniucr.entity.Doctor">
        update t_doctor
        set username    = #{username,jdbcType=VARCHAR},
            password    = #{password,jdbcType=VARCHAR},
            nickname    = #{nickname,jdbcType=VARCHAR},
            telephone   = #{telephone,jdbcType=VARCHAR},
            email       = #{email,jdbcType=VARCHAR},
            sex         = #{sex,jdbcType=INTEGER},
            birthday    = #{birthday,jdbcType=DATE},
            education   = #{education,jdbcType=INTEGER},
            entry_time  = #{entryTime,jdbcType=DATE},
            dept_id     = #{deptId,jdbcType=INTEGER},
            address     = #{address,jdbcType=VARCHAR},
            status      = #{status,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>


    <select id="findList" resultType="com.xiaoniucr.entity.Doctor">
        select a.*,b.dept_name
        from t_doctor a
        inner join t_dept b on a.dept_id = b.id
        <where>
            <if test="status != null and status != ''">
                and a.status = #{status}
            </if>
            <if test="deptId != null and deptId != ''">
                and a.dept_id = #{deptId}
            </if>
            <if test="username != null and username != ''">
                and a.username like concat('%',#{username},'%')
            </if>
            <if test="nickname != null and nickname != ''">
                and a.nickname like concat('%',#{nickname},'%')
            </if>
        </where>
        order by a.create_time desc
        limit #{start},#{limit};
    </select>

    <select id="findTotal" resultType="java.lang.Integer">
        select count(a.id)
        from t_doctor a
        inner join t_dept b on a.dept_id = b.id
        <where>
            <if test="status != null and status != ''">
                and a.status = #{status}
            </if>
            <if test="deptId != null and deptId != ''">
                and a.dept_id = #{deptId}
            </if>
            <if test="username != null and username != ''">
                and a.username like concat('%',#{username},'%')
            </if>
            <if test="nickname != null and nickname != ''">
                and a.nickname like concat('%',#{nickname},'%')
            </if>
        </where>
    </select>


    <select id="selectByUsername" resultMap="BaseResultMap">
        select *
        from t_doctor
        where username = #{username};
    </select>


    <select id="countByDept" resultType="java.lang.Integer">
        select count(id) from t_doctor where dept_id = #{deptId}
    </select>
</mapper>